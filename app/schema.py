from pydantic import BaseModel
from typing import List,  Annotated , Literal , TypedDict

class IntentOutput(BaseModel):
    intent: Annotated[List[Literal["risk_analysis", "summary", "query_answer",]], " List of Intent of the query . return list of [risk_analysis, summary, query_answer] depending on query "]

class QueryOutput(BaseModel):
    answer: Annotated[str, "Answer generated by the LLM"]
    page_numbers : Annotated[List[int], "Page number of the query answer"]

class SubqueriesOutput(BaseModel):
    subqueries: Annotated[List[str], "List of subqueries to be used for further processing."]

class ComplianceOutput(BaseModel):
    answer: Annotated[str, "Answer generated by the LLM for compliance check"]

class GraphState(TypedDict, total=False):
    query: str
    memory: list
    context: object
    intents: List[str]
    rag_answer_node: str
    summary_node: str
    risk_analysis_node: str
    final_answer: str